/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2007-2015 Broad Institute
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package org.broad.igv.ui;

import htsjdk.samtools.SAMRecord;
import htsjdk.samtools.SAMRecordSetBuilder;
import htsjdk.samtools.SAMTag;
import htsjdk.samtools.util.Locatable;
import org.broad.igv.feature.Strand;
import org.broad.igv.feature.genome.ChromosomeNameComparator;
import org.broad.igv.sam.*;
import org.broad.igv.ui.color.ColorPalette;
import org.broad.igv.ui.color.ColorUtilities;
import org.broad.igv.util.ChromosomeColors;
import org.broad.igv.util.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.QuadCurve2D;
import java.awt.geom.Rectangle2D;
import java.util.List;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;


public class AlignmentDiagramFrame extends JFrame {

    public AlignmentDiagramFrame(Alignment alignment, Dimension dimension) {

        setSize(dimension);

        JPanel readPanel = new JPanel();
        BoxLayout boxLayout = new BoxLayout(readPanel, BoxLayout.Y_AXIS);
        readPanel.setLayout(boxLayout);
        ReadDiagram diagram = new ReadDiagram(alignment);
        readPanel.add(diagram);
        diagram.setVisible(true);
        setAlwaysOnTop(true);

        this.add(readPanel);


    }

    private static class ReadDiagram extends JComponent {

        public static final int BORDER_GAP = 30;
        public static final int BETWEEN_ALIGNMENT_GAP = 15;
        public static final int BETWEEN_CONTIG_GAP = 10;
        public static final int ALIGNMENT_HEIGHT = 10;

        SupplementaryAlignment.SupplementaryGroup toDraw;

        public ReadDiagram(Alignment alignment) {
            this.toDraw = new SupplementaryAlignment.SupplementaryGroup(alignment);
        }


        @Override
        protected void paintComponent(final Graphics g) {
            super.paintComponent(g);
            g.drawString("Hello", 0, 0);
            draw((Graphics2D) g, toDraw);
        }

        private void draw(final Graphics2D g, SupplementaryAlignment.SupplementaryGroup toDraw) {
            int totalWidth = getWidth();
            final List<String> contigs = toDraw.streamInPositionOrder()
                    .map(SupplementaryAlignment::getContig)
                    .filter(Objects::nonNull)
                    .sorted(ChromosomeNameComparator.get())
                    .distinct()
                    .collect(Collectors.toList());

            final int totalAlignedBases = toDraw.streamInPositionOrder()
                    .mapToInt(Locatable::getLengthOnReference)
                    .sum();

            String lastContig = contigs.get(0);
            final int mid = getHeight() / 2;
            double lastPosition = BORDER_GAP;

            float alpha = 0.75f;
            int type = AlphaComposite.SRC_OVER;
            Composite alignmentAlphaComposite = AlphaComposite.getInstance(type, alpha);
            g.setComposite(alignmentAlphaComposite);
            g.setColor(Color.LIGHT_GRAY);

            Map<SupplementaryAlignment, Pair<Integer, Integer>> positions = new LinkedHashMap<>();
            int arrowPxWidth = 5;
            for (SupplementaryAlignment sa : (Iterable<SupplementaryAlignment>) toDraw::iterateInPositionOrder) {
                // System.out.print(sa.toString());
                final int length = sa.getLengthOnReference();
                double fractionOfWhole = (double) length / totalAlignedBases;
                double availableSpace = totalWidth - (2 * BORDER_GAP + (toDraw.size() - 1) * BETWEEN_ALIGNMENT_GAP + (contigs.size() - 1) * BETWEEN_CONTIG_GAP);
                double spaceToUse = fractionOfWhole * availableSpace;
                final String newContig = sa.getContig();
                if (lastPosition != BORDER_GAP && !Objects.equals(lastContig, newContig)) {
                    lastPosition += BETWEEN_CONTIG_GAP;
                }

                lastContig = newContig;
                int y = mid - ALIGNMENT_HEIGHT;
                int h = ALIGNMENT_HEIGHT;
                int start = (int) lastPosition;
                int end = (int) (lastPosition + spaceToUse);
                /*
                        1       2
                     0 <|=======|> 3
                        5       4
                */
                final int startAdjusted = start - (sa.getStrand() == Strand.NEGATIVE ? arrowPxWidth : 0);
                final int endAdjusted = end + (sa.getStrand() == Strand.POSITIVE ? arrowPxWidth : 0);
                positions.put(sa, new Pair<>(startAdjusted, endAdjusted));
                int[] xPoly = {startAdjusted, start, end, endAdjusted, end, start};
                int[] yPoly = {y + h / 2, y, y, y + h / 2, y + h, y + h};
                Polygon blockShape = new Polygon(xPoly, yPoly, xPoly.length);
                lastPosition = end;
                lastPosition += BETWEEN_ALIGNMENT_GAP;
                g.fill(blockShape);
                g.draw(blockShape);
                if (sa == toDraw.getAdapter()) {
                    Color original = g.getColor();
                    g.setColor(Color.DARK_GRAY);
                    g.draw(blockShape);
                    g.setColor(original);
                }
            }

            toDraw.streamInReadOrder()
                    .forEachOrdered(sa -> {
                        SupplementaryAlignment next = toDraw.getNextInRead(sa);
                        if (next != null) {
                            final Pair<Integer, Integer> currentPos = positions.get(sa);
                            final Pair<Integer, Integer> nextPos = positions.get(next);
                            int from = sa.getStrand() == Strand.NEGATIVE ? currentPos.getFirst() : currentPos.getSecond();
                            int to = next.getStrand() == Strand.NEGATIVE ? nextPos.getSecond() : nextPos.getFirst();
                            g.setStroke(new BasicStroke(2, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER));
                            int centerX = (from + to) / 2;
                            int width = Math.abs(from - to);
                            int height = (int) ((double) width / getWidth() * getHeight());
                            int centerY = mid - ALIGNMENT_HEIGHT / 2;
                            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
                            g.setColor(Color.GRAY);
                            g.drawArc(centerX - width / 2, centerY - height / 2, width, height, 0, 180);
                            drawPoint(g, to, centerY);
                        }
                    });

            positions.keySet().
                    stream()
                    .collect(Collectors.groupingBy(SupplementaryAlignment::getContig))
                    .forEach((contig, alignments) -> {
                        int start = positions.get(alignments.get(0)).getFirst();
                        int end = positions.get(alignments.get(alignments.size() - 1)).getSecond();
                        g.setColor(ChromosomeColors.getColor(contig));
                        final FontMetrics fontMetrics = g.getFontMetrics();
                        final int labelWidth = fontMetrics.stringWidth(contig);
                        //    s----label-----e
                        final int lineY = mid + 15;
                        final int LABEL_GAP = 2;
                        if (labelWidth + 2 * LABEL_GAP < end - start) {
                            final int leftLineEnd = (start + end - labelWidth) / 2 - LABEL_GAP;
                            final int rightLineStart = (start + end + labelWidth) / 2 + LABEL_GAP;
                            g.drawLine(start, lineY - 2, start, lineY + 2);
                            g.drawLine(end, lineY - 2, end, lineY + 2);
                            g.drawLine(start, lineY, leftLineEnd, lineY);
                            g.drawString(contig, leftLineEnd + LABEL_GAP, lineY + fontMetrics.getHeight() / 3);
                            g.drawLine(rightLineStart, lineY, end, lineY);
                        } else {
                            g.drawString(contig, start, lineY + fontMetrics.getHeight() / 3);
                        }
                    });
        }

        private static void drawPoint(Graphics2D g, int x, int y) {
            g.draw(new Ellipse2D.Double(x - 1, y - 1, 2, 2));
        }

        private static void writeContigName(final Graphics g, final String contig, final double x, final int y) {
            Color originalColor = g.getColor();
            try {
                g.setColor(ChromosomeColors.getColor(contig));
                g.drawString(contig, (int) x, y);
            } finally {
                g.setColor(originalColor);
            }
        }
    }



    public static void main(String[] args){
        final SAMRecordSetBuilder samRecords = new SAMRecordSetBuilder();
        samRecords.addPair("read1", 13, 50255292, 50255400 );
        final List<SAMRecord> records = new ArrayList<>(samRecords.getRecords());

        final SAMRecord record = records.get(0);
        String read = "m141213_163442_00118_c100750562550000001823151707081585_s1_p0/6849/0_5821\t2064\t14\t50255292\t38\t1302S12M1I5M1I25M1D12M1I7M1I2M1I10M1D4M1I7M1I10M1I6M1I4M1D9M5I4M1I4M2I18M1I9M1I5M1I20M1I13M1I6M1I6M1I16M1I3M1I13M1D9M1I4M2I4M1D14M1I21M1I1M1D5M11I2M1I11M1D10M1I12M2I6M1D3M1D11M1D3M1I3M1I19M1I3M2I6M1I8M1D1M2I1M1I6M1I9M3I2M1I4M1I1M1I10M1D1M1I9M1D6M1D4M2D6M2D7M1D13M1I5M1D6M1D8M1I3M4I3M2D1M1D9M1D25M1I4M1D20M1I18M1I9M1D3M1I2M1I4M1I6M1I5M1I18M1I4M3I17M1I1M1I9M1I11M1I24M1I5M1D14M3I16M1I23M2I14M1I6M1I10M1I10M1I13M2I15M1D10M1I12M1I2M1I6M1I11M1I5M1I4M1I11M1I6M1I9M1I19M1I1M1I29M1D23M1D16M1I23M1D3M1I2M1D9M1I20M2I4M1D19M1I11M1D21M1I5M1I11M1I2M1D2M1D7M1D16M1I4M1I8M1D9M1D18M1I12M1I9M1D5M1D5M1I5M1I5M1I36M1D7M3145S\t*\t0\t0\tATTCAAGGCACCAGCAGATTCTTGTCTGAATAGGGCTTGCCCCTCAAAGATTGGTACCTATAAGGCTGAGGTTGGGTGGCTCATACCTGTAATCCCAGCACTTTGGCGAGGCCAAGGTCGGGGGGATCCTTGGCCCAGGAGATTCGACACCAGCCTGCGGCAACAAGGGAGACCTCAATCTTAAAAAAAAGATGGCACCTTATTGCAGTGTACCTCACGTGGCAACAGGGGCACTCATCCTCATTCATGACACAGAGGCCCCTCGTTGACTTCACTTCCTAAAGGCCACTCTTAAATACCATCCACACTGGGCTATTTAGGTTCCCATATATGAATGTGGGGATAATTAACTGTAGAACCATAGCAGCCGTAACTCATGAAAGAACATTAATAAGTTTAACACCTCAGTGAGTATTTGTTGAGTCGTAGGATTAACAGAACATAAGGTTATTTGTAACAAATTTTTTAAAAAGACCACCAAAAATGGTTTTAGTCATTACTAAACCAACAGTGTCAGCAGGAAAAAAAGAAAATAGTAATTACAGAATTCCCGTAAGACATTACCTGCCATAAACTGGAGCACACAATTCATAACTCAAGCTTGACATAAAAAAATGCTGGTGGCAAAAGTAAAATATTTTTATTGCCTCTATTTTAGCCGTTATTAAAAACATAAACAGGCTGGTGACATGGTGTCTTACAGCCTGTATCCCAACACTTTGGGAGGCCAAGGGCAGGCGGAATTCACGGAGATCAGGACGATTTCAAGACCAGCACTGGCCAACAATGGTTGAACCCCAATTCACCACTTAAAATACCAAAATAAGCCAGGCGTAGATGGCGCATTTGCTTAGTAATCCCAAGCTACTCAGAAGGCTGAGGCGGATAATTGCTTGAATCACGGGAGGTGGCAGGTTGCCAGTGAGCTGAGATTGTGCCACTTGCACTCCAGCCTGGGACAAGAGCCGAGCGACTGCCTCAAAAAAAAAAAAAAAAAAAAAAAAATTCAAAGAGAGGTAAATTTCATGTAAGAAGATATACAGCAAGGCGTGGGCTTGGCTGTACTAGTTAACAAAACAATATGTGTGTAGGCGATGTGTCTGTCTTAGCTGGAAAATATTCGTCAGTGGTTTTGTAACCAGGGTACTTGGCTCTTTAAATGGTGTACTCGATGTTCAACATTATGTACGACCATATTGGTGTATAGATCGTGAGTGTGTTAGGAGTGTGGATGAAATTTATTTGTGGGGTGTCTTCAACAGACTGTTTCCAATTATTCTCTGTGTTGGTTTTTTGTGTGTGTTGAGATGGAGTACTCGCATCTGTCGACCAGGCTGGAGTGCAATGCACAATCTCGGACTCACTGACACAGCTCTGCCTCCAGAGTTCACGACTATTCTGCCTTCAGCCTTCCCAGTAGCTGAGGGGGGACTAACAGAGGCGCTCACCACCACACCCAGGCTAATTTCTTTTGTTATTTTTTTAGTAGAGACAGCGGTTTCACCACGTATAGCCAGGCATGGTTCTCAATTTCCTGACCTTTGTTGATCTGCCTGCCTGGCCTCTCAAAAGATTGCTGGATTACAGGCGTGAAGCCACCGTGCCAGGCCTCTCATTCTTATCTTTTTTTTTATATTAACTCAGTTCCATCAGAATCCAAAGCCTCTCCGCTTAAAATGATACTTCCTAAAGCTCTGTAAACCAAATTGTTATCAGCTAATCGAAGTACTAACCATTCTATTTGGCTTAGCATAAGATACGTGTGTGGATGTGGTAGTGTCTCGTGGTGTGTGTTGGTTGTATTGTGATGGGGGGGTGTCACTTGTCTTGTGTGGTGTACTGTGGTGCCAGTGTGGTTCCTGACTCCAGGAGGGTAATCACCCTAATTAAGAAGCAGGAAGCCACAAAGTAGCCATACCTTAGTCATCATGTGGATCATCTTACAGCAAATCTCTGTTAACTTCATAACGTTATAAACCTCAAGGAACGGAGTATTCTATTTTCTTAATGTTGTCAGAGGCACCCTCTGTCCCACCTCTAGGTTTTCTGGGGCTGTTTCTTCACAGGTTTGGTCTTTGTTTTTCCTTGGTTCTTCCCCTTCTTCCCTTTTTTCTTCTTTGTTTGAACCTGACCAGACTTTAATTCAGTAGAGGAAAACATCAGTCCAGTGTTGTATTTTTCAATACTGTGGGAATATTTTTACAAGATGTATTGAATTGCCTGTCATACGGCATAGGCAGGTGGGCTAGATGGCCCATTTTGAAAAAGCAAAAGAAAAAAATTGTTTTTAGAATGTTATTTACCCCCAGCATACCTTCATGATAAGTTCACGGTCTTCTTCATCTGGTCTTTGTATTTTTCTTTCATTTTTTCATTTGACTCTTACAAATTCAGAAGATTTTGGTTGAATATTTCAGCAGCAAAAAAAATGTCAACAAATACTTTTGCAAGAAATGGTGTTACTTTATTATTCTCTGTCAAAATGCTTACTGAATAAGGCAACCATATATAATAAACATATTGAGGCTACAAGTTGGATAACTGAAGGTCCTTCATCTTCAGGAATTTACATAGGGTGGAGAGAAGATTACACAGAGAAGTTAAGAATACTTAACAAACATTAAAGAAACTGTTGAGGAAGAAATAAAGTAAAACAGTATTGGAAAAGCAGTCTAATCCTCCTGCCTCAGCCTCCGAGTAGCTGGGGACTACAAGCGCTGCTGCCATGCCCGGCTAATTTTCTGTTATTTTTTAGTAGAGATGGGGTTATTCCACTGTATTAGCCAGGATGGTCTCCAATCTCCTGACTTGTGATTGCCCGCCTCGCCTCCCAAATTGCTGCGGATTTAACAGCGATGAGCCACCACTGCACCGGCCAAAAGTTTTTAAAAAATATAGTCTCAAGAAAGCATAACCATACTGTTAGTTGTGTTTAACTACTAAAAAATGAGGGGGTCCAAAATTTGGACTTCTGAGCAACTAAACAAAATAGAAACATGATCGTTTATATGGATCTTTCCAATGAGCCTATTAACTTTTCTCCTTCTTTAAATCCAATGGTTTAATTTTCAATATTTTCATTTATCAAGTGATAACATTAAGTAAACAAAAATTAAAATCACATTTTTTACCTTAGGTTGTGAGCTGATTGTGTCCTCCAAAAGATAGTGATTGAGGACAATCTCCACGTTTACCTATGAAGTGTGGCCTTATTTGGTTGATAGTGTCTTTCAGATGTAAGCAAGTTAAAATGATATTCTATACTGGATTAGGGTGGGCCCTTAAATCCAACAACTTCTGACATTATGAGAAAGGCATGTTGGGAAGAACATCGAGACAGAAATACACAATTGAAACATGAAATTGTTGACAGAGCAGGACTTGCCATGCTCACTGTAGCCAGGAAATGCTGAGGACCACCCGCAGCCACAGGAAGCTCCACAGAGGACAAGAAGAATTTTCCTCTACCAAGAACCTTCAAGAAAAGCCAGGTTCTTGTGGTGGGCGTGCTTTCATTCATACTTGCAGGTCTTCAAAACTGTGAGGCAATAATTTCTGTTGCTTTTAAAGCCACTCGGTTTGTGGTCATTTGCCACGCGCCTAGGAATCAAAACTAACTATCAACTGGCCAACTTTCGGTTGTTTTTATTTATTTTTTATTTTCATTTTTATTTTATTTTTTTATTTGTTTGAGATGGAGTCTCCCTTGTTGCCCCAGCTGGAGTGCAGAGTGGGCTATGATCCTCAAGCTCACTTGCAACCCCATGGGCCTCCTGGGTTCAAGTGATTCTCCTTGCTCAGCTCCTGAGTAGCTGGGATATACAGGCACACGCCACCATGCGCGGCTAAATTTTTTGTATTTGAGTAGGACGAGGGGTTCACCTGTTGGCCCAAGGCTTTGGATTCTCGAAACTCCTGACGTCAAAAGTGGATCCGCCCACCTTGGCTTCCAAAAGTGCTGGATTTACAGGCGAAAAGCCACTGCACCCAGCCTGTTTTTAATTAACACCATTTTGGTTTGAAATGCTAGAAGGAATTGGGACATTTAACATATACTTTCATTAGAGAGTAATTTTTTTATTGTAAGATATTAATTTTCTGTTTTTCTTTTTCATCATCTCTTTTTTCTAAAGTTTTCAATGTTGAGCTTGTATATCTTTTTGCAATAACAAAAACTTTCATTTAAAAACACTATTGTCACCATTATTTAACATTTTTCTCGTAAGTTTCTAGCGGTAAGTGGCTAAGAAATGGATGTCGGGTTTGATTTTAACAGCTCCCTGGGTCGGGGAGAACAGGGTTGGACTTGAAATCACAGGAAACATGAATCTTCAGTCCCAAGCTGTGCCATTTCCAGCTGTATGATCTTGAGTAAGCCACTGAACTTTTCGTAAACCTCAAGTTTCCCCCACCTCCCTATGATGTTGTTTCTATTGGGCTCTTCAATTTTCTACCACCGTGTGCCCTTTAAAGAAGGATGAGAGCAAGAGGGAAACAAATGTCAAACATTAATTGCATTTTTAATACAGTTCACTGGAGGATGACCCTGGGGAAGAGGGATTGAGGGAAATCAATTCTGGTGATGAAAACAATAATCGAGAATTACAAGAAGGGTCACAGCTTTAAATCTGGATTAGAGAGAAAAATGCCTCTGCATTTTTCTTTGCCTTTGTGGGGTTCAGTCAGACTGTTACTTGATTCAATGTTTACTGTGATTCAAACAGTTCTGAGGGGAAATGCTTTGTGTGTCATCAACTATTACAGACACTGAGGGGACAGAGATGTTCCAGACATAACCCTGTTTTCCTTCATGTGGGCTTCTCTTGTGAGTGGGTGAAGGGTGGGGTCAAAGTACTAGATGGATTTTTTTTAAATTTTTTATATTGTACTTTAAGTTTTAGGGGTACATGTGCACAAATGTACAGGTTTGTTACATATATTTACATGTGCCCATGTTTGGTGTGCTGCAACCATTAACTCGTCAGTTAACATTTAGGGTTATAATCTCCTAATGCTATTCTACCCCGCTCCCGCACCCATAACAGGCTTCTGTTATTGATGTTTCCCTTTTCTGTGTCCATGTGTTTCTCATTGTTCAATTCCACCTGTTGAGTGAGACATGCCAGTGTTTTTGGTTTTTTGTCCTTGTTTGATGTTTGCGGAGAATGAATGGTTTTCCAGCTTCATCCATGTCCCTACAAAGACATGAAAATTCATTTAAGATGGATTTTTTTAAATGACAAAGCAGAATCAGAAAAAATGGCTAAGAGAGGATGAATTGGCTGAGCCTTCTTTTCCATGCATTGGTGTCACCTTTATAAAGGATTGTGAAAATGTCAAGGCAGGGCAGCTGATCTTTTATTTATTGGTTTTCATTACAGGTGGACCTGGCCAGAAGCCCTTGGGAAACTGGCGGTGCGCTACGGGTAATTTATTTCTAGGCACCTTCAAAGGAGAAAAGGGCAGTGTCCTCCCTTCTCAACTGGATATTGTGCTAGACCATAGTTGCATACCGCCCACAAGCCCCCAAGCATCAGCTGGCCTGGCATCCCTGCCCAGAAGGGCCCATTGCCACTGGTCTTTCCACAAAAACCTGAGCCTTAGGCCAAATTAAAAAGCCACTTGTAGGCATTTTTACCACTTGAATTTACAGCCAAGAGGAAAATCCAACCATGGGGAAAAAGATCCACTGGCTTTTGGCAATTTTCCAAACTTTAAAAACCCCCAAAAGGGCCAAAAAAGGCAAAAACTACCCCAAAGGCCAAAAAGGCTATTAGGAACATTACAAGGAAAAAAAGTCTTTGATATTTCTTTTCTTTGT\t*\tSA:Z:17,64042266,-,2676S17M1D10M1I14M1D26M1I2M1I20M2I1M1I23M1I11M1D8M1D10M1D16M1I3M1I3M1D1M1I4M1I11M1I2M1I6M1D10M1I11M1D3M1D11M1D8M3I2M1I14M1I7M4I12M1I3M1I9M1D13M1D23M1I4M1I13M1D12M1I38M1I11M1I5M1D11M1I17M1I14M1D12M1D8M1I2M1I3M1D12M1I2M2I8M1I19M1D1M2D11M1D25M1I2M1I21M1I28M1I4M1D4M1I1M2I4M1I22M1I5M1I3M1D3M1I9M2I6M1I9M1D2M1D4M1D11M1D2M1I18M1D2M1I13M1I23M1I17M1I7M1I2M1D4M1I21M1I25M1D12M1I3M1I29M1D2M1D1M1D6M1D8M1I8M1D17M1D13M1I54M1D5M1I4M1D12M2I1M1I3M1I5M1I3M1I7M1I9M1I1M2I25M1I2M1D5M1D18M1I27M1I2M1I8M1D9M1D3M1I11M1D6M1I2M1I4M2I3M2I5M1I13M2I4M1I30M1D3M1I9M1I30M2D4M1D4M1D9M1D5M1I5M1I3M2I6M1I15M1D20M1I3M1I13M5I18M2I10M1I7M1D1M1I38M1D39M1I5M1I6M1588S,36,188;14,50254065,-,2S19M1D7M1I2M1D8M2I9M1I8M1I1M1I6M1I2M1I2M1D32M1I12M1I7M1D5M1D9M1I15M1I7M1D11M1I5M1I28M1I13M1I12M1I15M1I2M1D1M1I6M1I19M1D2M1D1M1D5M1I8M1I9M1I22M1D3M2D6M1I6M1D5M1I9M1I2M1I1M1I22M2I10M1D12M1I6M1I24M1I4M1I5M2I4M1I5M4I2M1I6M1D8M1I10M2D7M1I8M1D18M1I7M1I4M1D5M1I9M1I2M1D6M1I12M1I18M1D27M1I1M1D7M1D1M1D11M1D15M1I13M1I1M1I3M1I9M1I6M1D23M1I9M1I1M1I3M1D12M1I1M2I12M1I9M1I4M1I2M1D6M1I1M1I33M1I9M2I5M1I8M1I20M1D18M1I10M1I6M1I22M1I16M1I6M3I3M2D9M5I23M1I3M1D10M1D21M1I5M1I7M1I8M1I14M7I8M4I1M1I15M1I5M3D31M1I15M1I26M4624S,38,166;8,123906302,+,157S3M1I2M1I8M1I2M1I2M1I3M1I4M1D14M1I2M2I3M1I1M1I7M1I5M1D13M2I3M1I7M1I2M1I9M2D5M1D11M1I2M1D10M2I4M1I3M1I5M1D5M1I4M1I3M1D4M1I5M1I45M1I4M1I12M1D3M1I1M1I4M2I27M1I3M1D4M1I3M1I5M1I2M1D4M1I6M1D13M1I12M1I9M1I11M1I18M2I4M1I12M1D7M1I40M2I3M1I1M1I8M1D26M1I6M1I15M1D3M2I16M2I7M1I5M1D8M1I6M1D16M1I22M1I6M1I3M1D1M1D3M1I10M1D6M1D10M1I1M1D16M1I3M1I1M1I3M1I35M1I5M1I33M1I13M1I22M2I22M1D5M1I1M1D4M1D21M1I15M1I3M1I5M1I9M1D3M1I10M1D13M1D2M1I4M1I3M1D8M2I5M1D2M3I3M1D20M2I10M1I16M1I5M1I1M2I4M2I2M1I14M1D22M1I7M1I4M1I13M1I1M1I5M1D5M1D22M1I7M1I13M1I17M1I15M1I26M1I1M1D11M2D8M1D20M1I7M1D4M1I8M1D8M4409S,30,166;8,126480844,-,4239S17M1D6M1I30M1I11M1D4M1I7M1I11M1I9M1I50M1I8M1I10M1411S,2,11;\tKB:f:24.508675\tSB:f:24.508675\tID:i:150690\tMD:Z:24C15G1^G31^C31^A101C24^T17^G36^G11T6^C28^C3^T11^G9A30A1^C19C0A3T4C1T2^A2T3A1T1^C3A2^A0C3^CC0A1T1A1^AA0T0A3T1^A0C14T0T1^A1C4^A0A0A2C9^GG1^A9^T29^C47^G13G92C2^C115A5^A125^C23^T11T10A16^G5^A33^A30^A39^A2^A7^A28^A9^C39^A5^A51^A7\tQE:i:2676\tXE:i:1426\tXI:f:0.8567\tNM:i:203\tXR:i:1374\tAS:i:1426\tQS:i:1302\tXS:i:0\tCV:f:23.60419\tSV:i:2";
        String saTag = "17,64042266,-,2676S17M1D10M1I14M1D26M1I2M1I20M2I1M1I23M1I11M1D8M1D10M1D16M1I3M1I3M1D1M1I4M1I11M1I2M1I6M1D10M1I11M1D3M1D11M1D8M3I2M1I14M1I7M4I12M1I3M1I9M1D13M1D23M1I4M1I13M1D12M1I38M1I11M1I5M1D11M1I17M1I14M1D12M1D8M1I2M1I3M1D12M1I2M2I8M1I19M1D1M2D11M1D25M1I2M1I21M1I28M1I4M1D4M1I1M2I4M1I22M1I5M1I3M1D3M1I9M2I6M1I9M1D2M1D4M1D11M1D2M1I18M1D2M1I13M1I23M1I17M1I7M1I2M1D4M1I21M1I25M1D12M1I3M1I29M1D2M1D1M1D6M1D8M1I8M1D17M1D13M1I54M1D5M1I4M1D12M2I1M1I3M1I5M1I3M1I7M1I9M1I1M2I25M1I2M1D5M1D18M1I27M1I2M1I8M1D9M1D3M1I11M1D6M1I2M1I4M2I3M2I5M1I13M2I4M1I30M1D3M1I9M1I30M2D4M1D4M1D9M1D5M1I5M1I3M2I6M1I15M1D20M1I3M1I13M5I18M2I10M1I7M1D1M1I38M1D39M1I5M1I6M1588S,36,188;14,50254065,-,2S19M1D7M1I2M1D8M2I9M1I8M1I1M1I6M1I2M1I2M1D32M1I12M1I7M1D5M1D9M1I15M1I7M1D11M1I5M1I28M1I13M1I12M1I15M1I2M1D1M1I6M1I19M1D2M1D1M1D5M1I8M1I9M1I22M1D3M2D6M1I6M1D5M1I9M1I2M1I1M1I22M2I10M1D12M1I6M1I24M1I4M1I5M2I4M1I5M4I2M1I6M1D8M1I10M2D7M1I8M1D18M1I7M1I4M1D5M1I9M1I2M1D6M1I12M1I18M1D27M1I1M1D7M1D1M1D11M1D15M1I13M1I1M1I3M1I9M1I6M1D23M1I9M1I1M1I3M1D12M1I1M2I12M1I9M1I4M1I2M1D6M1I1M1I33M1I9M2I5M1I8M1I20M1D18M1I10M1I6M1I22M1I16M1I6M3I3M2D9M5I23M1I3M1D10M1D21M1I5M1I7M1I8M1I14M7I8M4I1M1I15M1I5M3D31M1I15M1I26M4624S,38,166;8,123906302,+,157S3M1I2M1I8M1I2M1I2M1I3M1I4M1D14M1I2M2I3M1I1M1I7M1I5M1D13M2I3M1I7M1I2M1I9M2D5M1D11M1I2M1D10M2I4M1I3M1I5M1D5M1I4M1I3M1D4M1I5M1I45M1I4M1I12M1D3M1I1M1I4M2I27M1I3M1D4M1I3M1I5M1I2M1D4M1I6M1D13M1I12M1I9M1I11M1I18M2I4M1I12M1D7M1I40M2I3M1I1M1I8M1D26M1I6M1I15M1D3M2I16M2I7M1I5M1D8M1I6M1D16M1I22M1I6M1I3M1D1M1D3M1I10M1D6M1D10M1I1M1D16M1I3M1I1M1I3M1I35M1I5M1I33M1I13M1I22M2I22M1D5M1I1M1D4M1D21M1I15M1I3M1I5M1I9M1D3M1I10M1D13M1D2M1I4M1I3M1D8M2I5M1D2M3I3M1D20M2I10M1I16M1I5M1I1M2I4M2I2M1I14M1D22M1I7M1I4M1I13M1I1M1I5M1D5M1D22M1I7M1I13M1I17M1I15M1I26M1I1M1D11M2D8M1D20M1I7M1D4M1I8M1D8M4409S,30,166;8,126480844,-,4239S17M1D6M1I30M1I11M1D4M1I7M1I11M1I9M1I50M1I8M1I10M1411S,2,11";
        record.setAttribute(SAMTag.SA, saTag);
        final Alignment samAlignment = new SAMAlignment(record);

        AlignmentDiagramFrame frame = new AlignmentDiagramFrame(samAlignment, new Dimension(500, 100));
        frame.setVisible(true);

    }
}
