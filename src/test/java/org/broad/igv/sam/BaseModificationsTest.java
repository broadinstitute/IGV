package org.broad.igv.sam;

import org.junit.Test;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.*;

public class BaseModificationsTest {

    @Test
    public void testOrientModifications1() {

        //top-fwd	0	*	0	0	*	*	0	0	AGGATCTCTAGCGGATCGGCGGGGGATATGCCATAT	*	Mm:Z:C+m,1,3,0;	Ml:B:C,128,153,179
        byte[] sequence = "AGGATCTCTAGCGGATCGGCGGGGGATATGCCATAT".getBytes();
        String mm = "C+m,1,3,0";
        byte[] ml = {(byte) 128, (byte) 153, (byte) 179};
        boolean isNegativeStrand = false;

        int[] expectedPositions = {7, 30, 31};

        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, isNegativeStrand);
        int[] positions = mods.get(0).positions;
        assertArrayEquals(expectedPositions, positions);
        for (int i = 0; i < positions.length; i++) {
            assertEquals('C', sequence[positions[i]]);
        }
    }

    @Test
    public void testOrientModifications2() {

        //                                                    |         |         |
        //top-rev	16	*	0	0	*	*	0	0	ATATGGCATATCCCCCGCCGATCCGCTAGAGATCCT	*	Mm:Z:C+m,1,3,0;	Ml:B:C,128,153,179
        byte[] sequence = "ATATGGCATATCCCCCGCCGATCCGCTAGAGATCCT".getBytes();
        String mm = "C+m,1,3,0";
        byte[] ml = {(byte) 128, (byte) 153, (byte) 179};
        boolean isNegativeStrand = true;

        int[] expectedPositions = {28, 5, 4};
        byte[] expectedLikelihoods = {(byte) 128, (byte) 153, (byte) 179};

        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, isNegativeStrand);
        int[] positions = mods.get(0).positions;
        assertArrayEquals(expectedPositions, positions);
        for (int i = 0; i < positions.length; i++) {
            //System.out.println(positions[i] + "  " + (256 + ml[i]));
            assertEquals('G', sequence[positions[i]]);    // negative strand alignment so C -> G
        }

        Map<Integer, BaseModifications.Mod> modMap = BaseModifications.getBaseModificationMap(mm, ml, sequence, isNegativeStrand);
        for (int i = 0; i < expectedPositions.length; i++) {
            Integer pos = expectedPositions[i];
            BaseModifications.Mod mod = modMap.get(pos);
            assertEquals(expectedLikelihoods[i], mod.likelihood);
        }
    }

    @Test
    public void testOrientModifications3() {

        //bot-fwd	0	*	0	0	*	*	0	0	AGGATCTCTAGCGGATCGGCGGGGGATATGCCATAT	*	Mm:Z:G-m,0,0,4,3;	Ml:B:C,115,141,166,192
        byte[] sequence = "AGGATCTCTAGCGGATCGGCGGGGGATATGCCATAT".getBytes();
        String mm = "G-m,0,0,4,3;";
        byte[] ml2 = {(byte) 115, (byte) 141, (byte) 166, (byte) 192};
        boolean isNegativeStrand = false;

        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, isNegativeStrand);
        int[] positions = mods.get(0).positions;
        assertEquals(4, positions.length);
        for (int i = 0; i < positions.length; i++) {
            assertEquals('G', sequence[positions[i]]);
        }
    }

    @Test
    public void testOrientModifications4() {

        //bot-rev	16	*	0	0	*	*	0	0	ATATGGCATATCCCCCGCCGATCCGCTAGAGATCCT	*	Mm:Z:G-m,0,0,4,3;	Ml:B:C,115,141,166,192
        byte[] sequence = "ATATGGCATATCCCCCGCCGATCCGCTAGAGATCCT".getBytes();
        String mm = "G-m,0,0,4,3;";
        byte[] ml2 = {(byte) 115, (byte) 141, (byte) 166, (byte) 192};
        boolean isNegativeStrand = true;

        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, isNegativeStrand);
        int[] positions = mods.get(0).positions;
        assertEquals(4, positions.length);
        for (int i = 0; i < positions.length; i++) {
            assertEquals('C', sequence[positions[i]]);
        }
    }

    @Test
    public void testONTForwardAlignment() {
        byte[] sequence = "GTGTAGCTGGTTCAGTTACATTATTGCTCACTGCAGCCTCCGCCTCCTGGGTTCAAGTGATTCTTCTTGCCTCAGCCTCCCAAGTAGCTGGGATTACAGGCGCCCGCCACTACCCGGCTAATTTTTGTATTTTTAGTAGAGACAGGGTTTCACCATGTTAGCCAGGATGGTCATGATCTCTTCCTGACCTCATGATCCGCCCGCCTCGGCCTCCCAAAGTGCTGGGATTACAGGTGTGAGCCACTGCACCAGAAAACAAGAGTGAATTTTAAAAAACAGTGCAGCAGGGCCGGGCTCCGTGGCTCACATCTGTAATCCCAGCACTTTGGGAGGCAAAGCCGGGCAGTTCGTTGGAGGTCGGAGTTCAGGAGACCAGCCCGGGCAACATGGTGAAACCCCGTCTCGACTAAAAATACTAAAAATTAGGCCAGGTGCAGTGGCTCACTGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGAGGGCGCTTGAGGTCAGGAGATGAGACCATCCTGACCAACATGGCAAGACCCATCTTAAAAACACACACTCTTAAAGCAGGTTTGTGTTTGGCACCAGTAGATCAGTCCTCAGGAGGCTGAGGCGAAAGTCAACAGGTGAGGGAGTTACGGTGTCGAGACAGGCCACTGCACTTCCAGCCTGGGTGAGTTAGAAGACCTGTCTCAACAAAAATTAATAAAAATTAGCTGGGTGTGAGTGCACGTACACTTGGGAGGCTGAGGCAGCAGAATCATTTAAACCTGGGAGGCAGGGGGTTGTAGTAGAAGCCAAGATCGTGACACCGTACCAGCCTGGGTGACAGAGAAAGACCCCATCTCAAAAAAAACAGAAAACAAAAAACAAAACAAACAAAAAAACTAAATATCTTTGTAGCCCACAGGCTATCCATTTTATTCAAAGCATCAAGAAGTAAGAAAATGAAGAAAGGGCTCTGTGTTGCCCATAGGTGGGTGGGATTGCAATAACTCGAGAAGCATCAGTGAGGCTTTCAGGCAGGAGGCTCTCACTCCCTCTGTCAGTCATCTTGGAGATGTCCAGAGGCTAAGATGCCCAGCCATACAGAGGTGGTGAGAACCATCGTGGCGGCTCCAGGAGAAGAGGCCCAGAAATGGACATTTGAATGATTGAAACTGCCTAAAGCACTCCTGCAACAAAGCACTCCATGTCTCACATTGACATGGAACAATTAACTGAAATGGGAAACATATCAACTCAGGCTGCCTCCCTCTGTTTCAGACCAGTGTTCTACTCTACACAGCAAACCAGGTCTCCCTTTCTTTCCTGCCTGCAGTCATTCCCAGAAGTTTACCTCAAAGGAACTCATGTTTCTGAAAATCCAGTTTGGGCATGGGCTCTCAATGCCTTCTGGCTCCCTCTCTGAATTTCATAATCTGATATAGAAAATAGTAGCTCACATTTCTGACACTCTGTATGGAGAGATGTGTAGCATGGCTCGCCTCTCCATGAACGTCAGTGACCCTGAGATTTGGATCTTTGCCCTTCACATTTCTATATTCAGGAGCTGGCTCCATGCAATTTGGACTCTACCCCTAATAAGTCAGGGACATGAACCCCAAATTCTAAACACTTGGACCTCCAGAATCACCACCTGGATTCATTCCTGTCCAAATAAATGACTGTGGCCAGTATGTGTGTGTGCTATATTTATAAAGCACTTTTGATGTTAGGTTTATTTAAGCTTCACAATTCTTCAGTGAGGTAGGAAATAATCCCATTTTATGGAGGGAAAAGCTGAGATTTGGAAAAGTTATCCCCCAAAGTTACACAGCTACTAAGGGACAGAGCTGGACTTCAAATCAAGTTGTTTGATCTAAACTCAGTGCATGTCCACCATTTCATCCTACCTTTTGATTACGGTTGACATTATAAATTAAATACATGTCCCTAAGTGGATTTTTAAGTAAGCAAATAAGATCTCTTCCTACCTAAGCACCTAGCACATTAGCTGGAGAACTAGCACAAAGCGAAGCCACACAGATTGTTACCAACTCAGCTCTCTCCCAATGGATGCATGAGTTTAAAGGATATTAAAGTTACCAATTATGGAACTCATTCTAGGTGCCAGGCCCTGTGCCAGTCTCTTTACATCCATTATCACTTAATCTTAATATCAGTTATTTCAAGATAGGCATTATTCTTCCACTGGGAAACTGAGGCTCAAGAAGTCAAATATTGGCTGGGTGTGGTGGCTCATGCCTGCAATCCCAGCACTTTGGGAGGATCACTTGAGGTCAGGAGTTTGAGACCAGCCTGGCCAACATGGTGAAACCCCATCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCAGGCATCTGTAATCCCAGTTATTCAGGAGGCTGAGGCAGGAGAATCACCTGAACCCGGGAGGCAGAGGTTCAGTGAGTCGAGATCTTGCCACTGCACTCCAGCCTGGGAGACAGAGGGAAATTCGTCTCAAAAAAAAAAAAGAAAAGAAAAGTAGAAGACGAAGATGAAGAAGAATAAGAAGAGAGAAAGAAGAGAGGTTAGAGAAAAGAAGGAGAAGGAGAAGGAGGAGGAGAAGGAGAAGGAGAAGAAGAAGAAGAAGAAGAAGAAGGAAGAAGAAGAAGAAGAAGAGTCAATATCTGGAGAAGAAGAAAGAGAGGAAGAAGAAGAAGAGGAAGAAGAAGAAGAAGGGAAGGAAGAAAGAGAAGAAGAACAGAAGAAAGAGGGAGTCAAATATCTGGAGAAGGGAGGAAGAAAGAAGAAAGAAGAAAGAGGAGGAGGAAGAAGAAGAAGAAGAAGAAGAAGCAGGAGCAGGAGAAGAGAAGAAGAAGAAGAGAGAGGGAAGAGGGAAGGAAGAGGAGAGGAAGAGAGAGAAAGAAGAAGAAGAAAGAAGAAGAAAGAAGAAAGAAAGAAAGAAAGAAGAAGAAAGAAGAAAGAAGAAGAAGAAAGAAGAAAAGACAAATATCTGGAGCCAGGATTTGAGCCTGGCCCTTGACATATAATGCAAGAGCCTCACCACACTCTCCTTACCAGCCCCTGTCCTTAGGCCTGGGCCCCTGATTGCCTTGTCAGAGAAGCCAGAGAATCTGGGCCTTTTTAGCTTTTATCCTAGGAGGCTGGAATAATCTCCTTCTAAGGGGTACTAAGGGGACGCCCAGGGAGAACAGGGGTTCTGATGAGGGTGGAGGGAGAGGGGTGTGATGCTGTACTGGCTTTGTTCACTAACACAGCTACTAAGGGAGCTTTGAGAGAGAGGCCTCTCAGTGAAGAGCCCGGGTCAACCCCCATTTCCCTCGTTCAGGTACGACATACCCTGGGAAGCCTTGACTCATTAGGGCTCCAGAGTCTCTAACTGTGCAGCAGGG".getBytes();
        String mm = "C+m,10,17,2,5,16,2,2,18,2,11,1,0,5,5,18,0,0,27,0,2,2,15,11,2,35,27,95,5,88,21,92,17,59,21,9,1;C+h;";
        String cigar = "25S38M1I48M2D69M3I64M1I2M1I11M2D2M1D14M1D1M2I3M1D74M1D7M2I49M1I27M1I31M2I7M3D16M1D22M1D12M4D15M1D10M1I7M2D2M1D10M1I1M2D3M1D18M2D7M5D10M2D3M1D8M2D8M1D11M1I11M1D1M2D9M4I7M9D31M1I3M1I49M1I12M2I22M2D41M1I6M1I31M1I21M1D16M1I18M1I12M1I9M1D10M2D10M1I14M2I17M2D43M2D15M2D18M3D73M1D8M2D63M1D8M3D8M1I23M7D65M1I3M5I6M2D4M1D4M1I6M1D4M3D9M1D3M1D9M2I2M1D4M2I6M1D2M3I4M1I2M1I17M1I4M5I7M1D23M1I5M1I4M1I24M4D15M1D2M2I21M4I2M1D48M1I6M1D141M1I27M1I45M1D13M1D65M2D11M1D72M1D7M3D34M1D9M2D2M1D6M3D13M1D66M2D25M1I19M10D242M1D53M1D21M1D43M4D8M1D17M4D56M1I17M2I4M1D10M15I27M6I8M3I9M2I2M1I12M2I3M5I6M2I7M1I6M1I6M2D5M3D3M1I34M1I8M1I13M1I8M5I14M5I2M1I3M1I12M1I9M1I6M5I3M1I3M1I9M1I6M1I12M1I54M1I7M1I5M1I25M1D20M1D5M1I27M1I42M1D10M1D7M1D13M1I15M1D4M1I59M2I39M1I62M15S";
        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, false);
        int[] positions = mods.get(0).positions;
        assertEquals(36, positions.length);
        for (int p : positions) {
            assertEquals('C', sequence[p]);
        }
    }

    @Test
    public void testONTNegativeAlignment() {
        byte[] sequence = "TGTACTTCGTTCAGTTACGTATTGCTAAAGCTTTCTGGAGATTGTGTTAGTTTTCTATACTTGCTGTAACAAATCTACAAATTGGGGACCACAAAACAGCACAGAAAAAACATTATCTGCGGTTTCTGTAGGCCAAAAGCCCAGGTGATCTGACTGGGTCTTCAGTTTGGGGTTTCACAGGGCTAAAATCCCAAGGCTGTTCTTTGTGGGGGCTCTGGGGAAGAATCCACTGCAGGGCTCATTTCAGTTGTTTGGTGAATTCAGTTAATTGAGGTTGTAGGACCAGGTTCTTGTTTCCTTATTGGCTGTCCAAATTCCTTCTCATTCCCATGTGGCTGCTTCAGCTGTGGCAAGTTAGGTCCTCATGCTGAGAATCAATCCAAGTCTCCCTCCACCACATCTCTCTTTCTTCCATCCCCAGCCCTGAGATAACTCTGTTTAAGGTTCATTTGATTATCCTGAGGTCCACTTGGATAATCCCATGATAATCTCCCTATCTTAAGACCTGTAACCTTAATTACATTTGATATTGTGAAGACAATGGTGTCTGTTTACTTACCCTACAGAATCTGATGGAATTGGGGCTATTCTTCTCCTTCTAGGACATTCACTTGGCCAGAGGTGTACGACATGGCTGCTCAAACGAGTCCAGATGCCCACATACCTGTGCTCTTTGCCGTCATAAAGCTGGAAACCTACACGCATTTGCTCAGGATATCCTAATTTTTTAATGCAAGTTTGTCTTGAACAGGTCCTGAATCTCTGAAAGTCTCAGTGAGCAACTCTTAGGGACAAAGTGACAAAGACCATCAGGAGTCTCTTGTGGACTGGCTTTCCTTTGAAAGTAAAATTCAGAGTCTTACACTGCCATGCAGAGTAATTCTGCATGTTCTGTCAGTAATGTGTTGACACTTCCAGAGTATAAGCAATTAATTCATTCAGCAGATGTTCTTTTCCAGTACACACTACATTCAGCCTTAAGCACAGTGACATGTACTTTATATATCTTCTTCAAAAGCAGTTCTTACCATCAATAGCCGAGACTGGTAGGCAGGCGGCAGGGTGGCAAGAGATACAAACAGCTACAGTTTGAAAAAAAGTAAAGTGTCACAAATCTTTGGGGTTATTCAAAGGTGCTATTTAAGCCTTGTGGAAGATGTAAATAACTGAGTGTGTTTTCCAAGACTGAAGCAAGTGGGTGGGAGAGAAGGGTTGTGTGTGAGTGGGTGATGGGTTTGGGAAGAGATGGGTAGCTCTGAGTGGAGGTGGGAAGCTTGGATTGTTTGAGAGAATGTCTCTTGCCAGCAGTTCACAACGAGATGGAACTGGCTGAAACTGGACAACACCATTGGACCACACTGGGACTTGTTGTGATTGGCCTCATTGTTCTGGGCTGATTTTGTTGCTTAGAAATCACCATGGGTAGGATCACGAGATCACAGGAAAAACCTGCTCAGGGAATCAGTTCCTCAAGGTATCCCCACTAAATAAACAGTTTCCCATCAAATCAGAGTCCGCTGCGGTTTCCCGCTCAGGGCTGTGATGGGAAACAGGCAAGACTTGGGGACCATCTGAAACAACTTCAGACTTCCTGCTTGAAGTGAAAGCCCTTTGGGATGCTGGGGAACTGAGTGCCTAAGACCTTGTTACCAATCTGTCATCGGTGACCTAGTCCCACGTTATGAATAAAGACCACCCATTTCTGTTGTTAGAACAACCTCCCCTCTGTCAAGAGGGCAGCACTGGGTTTCTGACTTCCTACAGACAAACCCAAGGTGAAGAAGGGGGAGTTTGGAGAAGGCAGAAATCCAGATCCCTCGAAATATGATAAAGACACAAATATACAAATAGACCTTGTACAAGCACATCCTATGAATGACCTGTGAGAGACTCTGGAGCCCTAATGAGTCTGGCTTCCCAGGGCATGTGGGTACCTGAACTTGAGGAATGGGGGTTGGCCCGGGCTCTTCACTGAAGGCCTCTCTCAAAGCTCCCTTGGTAGCTGTGGGTAGTGAACAAGCCAGTGCAACATCACCCCTCTCCTCCACCTCATCGGAGACCCTGTTTCTCCCTGGGGCGTCCCCCTTGATGCCCCCTTAGAAGGGAGATTATTCCAGCCTCCTAGGATAAAGCTAAAAGAGCCCAGATTCTCTGGCTTCTCCGACAGGCAAATCAGAGGCCCAGGCCTAAGGGACAGGGGCTGGTGGGGAGGTGTAAGAGGCCTAGGACATATGTCAAGGGGGCCAGGCTCAAATCCGACTCAGATATTTGTCTTTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCCTCTTCTCTTCCTCTTCCTCTTCTCTTCTTCTTCTTCTTCTTCTTCTCCTGCTCCTGCTTCTTCTTCTTCTTCTTCTTCTTCCTCCTCCCCTCTTCTTCTTCTTCTTCCTCCTCTTCTTCTTCTTCTCAGATATTTGACTTCTTCTTCTTCTTGTTCTTCTTCTTTCTTCCTCTTCCTCTTCTTCTTCTTCTTCCTCTTCTTCTTCTTCCTCTTCTTCTTCTTCTTCTCCAGATATTTGACTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTCTTTCTTCTCCTTCTCCTTCTCCTCCTCCTTCTCCCTTCTCCTTCTCTTTCTTTCTCTAACCTTCTCTTCTTCTTTCTCTCTTCTTATTCTTCTTCATCTTCGTCTTCTACTTTTCTTTTTTCTTTTTTTTTTTGAGACAATTCCCTCTGTCCCCCAGGCTGGAGTGCAGTGGCAAGATCTCATGACTCACTGGAACCTCTGCCTCCCGGGTTCAGGTGGATTCTCCTGCCTCAGCCTCCTGAATAGCTGGGATTACAGATGCCTGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGATGGGGTTTCACCATGTTGGCCAGGCTGGTCTCAAACTCCTGACCTCAGTCCTCCCAAAGTGCTGGGATTGCAGGCATGAGCCACCACACCCAGCCAATATTTGACTTCTTGAGCCTCAGTTTTCCCTGGTATTGCAAAAAAGGAAGAATAATGCCTATCTTAGACAACTGATATTAAGATTAAGTGGGATAATGGATGTAAAGAGACTGGCACAGGGCCTGGCACCTAGAATGAGTTCCCATAATTGGTAACTTTTAATATCCTTTAAAAAACTCATGGCAAATCCATTGGGAGAGCTGAGTTGGTAACAATCTGTGTGGCTTCAGCGCTTTACCGAGTTAGTTCTCAGCTAATGTATAGGTGCCAGAGTAGGAAGAGATCTTGCTTGCTTGCTTAAAAATCGAATTTAGGGACATGAAAATTTAATTTATAATGTCAGCAATCAAAAGGTAGGATGAAATGGTGGACATACTGAGTTTGGGATCAAAACAGCTTGGATTTGATCCAGCTCTGTCTGCTCTAGTAGCTGTGTAACTTTGGGGATAACACACTTTTCCCAAATCAGCTTTTCCTCCATAAAATGAGGTCATTTTCCTACCTCACTGAAAGAAGTAAACCAAGCTTAAATAAACCTAACATCAAAAGTGCTTTATAAATATAGCACACACATATGACCACAGTCATTTATTTGTGAGACGAATCAGGTGGTGGATTCTGAGGTCAAGTGTTTAGAATTTGGGGTTCAATGTCCCTGACATTGGGGTTCAGTTCCCAGGGATGCAGCCTGGTTTGTAGAAATGTGCCAGGAAGGGCCAGCATCCAAATCTCAGGTCAGGACGATCATGGAGAGGGCAGCCATGCTATGACATCTCACAGGTGTCAGGGTGTGAGCACATTAGGACCAGGATGAGAACAGAGGGGAGGCGCAGAAGGCAGCATTGGTGAGCCCTGCCTCAAGATCTGGATGAGGAACATGGCTATTAGAGTGAAACTTCTGGGGAATGACTGCAGCGGAAGAAAGGGAGACCTGTTTGGGGACTTGCTGTAGTGAGTAGAACACTGTACCTCGAAATATAAGGAAAGACGGCCTGAGTTGATATATTTCCATTTCAGCTAATTGTTCCATGTCAATGTGAGACATGGAGCAAGCTTGAAAGCAGGAGTGCTTTAGGCAGTTTCAATCATTCAAATGTCCATTTTCTAGGCCTCTTCTCCTGGAGCCGCCACGGTAGTTCTCACCACCTCTGTGCATGGTTGGGCATCTTGCAGCCTCTGGACATCTCCAGATGACTGACAGAGGGAGGGAGAGAGCCTCCTGCCTGAAAGCCACTGATGCTTCTCGGTTGTGCAAAAATCCCACCCACTCTATGGGCACACAGAGCCCTTCTTCATTTTCTTACTTCACCGATGCTTTGAATAAAAATGGATAGCCTGTGGGCTACAAGATATCTAGTTTTTGTTTGTTTTGTTTTTATTTTCGTTTTTTTGAGATGGAGTCTTTCTCTGTCACCCAGGCTGGAGTGCGGTGTCGATCTTGGCTTACTACAACCCCCGTCTCCCAGGTTTAAATGATTCTGCTGCCTCAGCCTCCCAAAGTGTACGCCACCACACCCAGCTAATTTTTTGTTGTTTTTTTTTATGAGACAGTCTCACTCTGTCGCCAGGCTGGAATGCAGTGGCCCAGTCTTGGCTCACCGCAACCTCCACCTCCCAGGTTCAAGTGATTCTCCTGCCTCAGCCTCCTGAGTAACTGGGACTACCGGTGCGCACCACCACACCCAGCTTTTTGTGTGTGTATTTTTAGTAAAGACGGGGTTTCACCATGTTGGTCAGGATGGTCTCGATCTCCTGACTTCAGTGACCACCCACCTCAGCCTCCCCAGTGCTGGGATTACAGGCGTGAGCCACTGCACCTGGCTAATTTAGTATTTTTAGTCCGAGACAGGGTTTCACCATGTTGCCCAGGCTGGTCTCGAACTTTTGACCTCAAGAGCACCCGCCTCGGCTTGGGGCTCCCAAAGTGCTGGGATTACAGATGTGAGCCACTGAGCCTGGCCAGTATCAACTTTTTAAAATCTGAATTCTTGTTTTGTGCAGTGGCTCACACCTGTAATCCCAGCACTTGGGAGGCCGAGGCAGGCGGATCATGAGGTCAGAGATCGAGACCATCCTGGCCAACATGGTGAAACCCTGTCTCTACTAAAAATACAAATCGCTGGGCATGGTGGCGGGCGCCTATAGTCCCAGCTACTCGGGAGGCTGAGGCAGAAGAATCTTGGAACCCAGGAGGCAGAGGCTGCAGTGAGCCAGAAATCACACCACTGCACTCTAGCCTGGGTGACAGAGTGAGACTCTGTCTCAGGAAAAAAAAAAAAAAAAAAAAATTATAATTTTCTTTTGTGACTCATGATTCCTCCCCAATTCTTCTGATTAAGTGGAGTAGCTCTTCAAATGCAAATCATTTTTTTCTAAAAAGTCAAGTCAGATGAAATCAATTTTTGTTTCTCTGGAGTGGGGGTCCAGGAAAGTCTTTTTATCTGAAGTAACCTTTCTCTGGAATTCTTTTTCTCAAATCAGTAGTGGAGGTGCTTCTATATAGTTTTGCTGCATTCCCCTCACTGGGTGGGCATCCCAGCCACAAGAAAGGAGGGGCATGGTGAGGCTGAGAAGAGAGAAGAAACATTTTGAGCACTCCTGCTATGAGCCAGGCTCTGTTTCCATCTGTTTCTCATTTCATCTTCTCATGGTGAGGCTAGAGGTAGCTAGAATGACCTCTGTTTAACACCAGGAGAAACTGAGGCCAGAAGAAACTGAAAAGATCTTGTGTGATAAAATAATGGGCTGTGATTTGAGTCCAGATCTAACACCACAGATGTTCTTTCCTCTATGTTAGGTTCAGTTATTGCTTGCTTCTGTAACAAGCTTCTCTCCAAAGTTAGGGTCTTAAAACAACAATCACCCTTCTATTTTATCTCAAGATTTTGTGGGTCAGAATTTGGGCAGGGTGTGGTCAGGTGATTCTTCTGGTCACTTAGTGGATGGAGCTGTTCTAGAATCAAGACAGGTTTACTCACTCAGCAGTGACTGACCAGTATACCCAGCATCCCAGATGCGGCCTCTCTTGGCATGGTGGACAAACATTTGGGCTTTACACTGTAGCTCAGCATTCCCACAGAGAATGTTCACGGAGACACAGACAAAATACAGCTTTGCTAGACCAAGCCTCAGAAGTTCCAGAACATCCCTTCCACCATGTTCCGTTAGTCAGGCATTCTCCGTCTCTTCAGTGAGAGAAGTAGCAAGGAATTTGCAGCCATCATTTGTCCTACTATAAAAGATACTGTTTAATCACCAATGGTTACATAAATTACAGTACAAAGGTGGCAGAAAGAAATGCATGGCCTAGGCTGCCTGTTTTGGAAAACAAGAGTTAGACAGCCCAGTTGAGCCAGCGTGCTAATCTTCATCTTCCCTGCCCTAGACTGAAGAAATGCAGATGTGTGAAAGGTAAGTGGAGGGGGAAGAGAGATGTCCTCCTCTGTTCCTTAGCTAAACACATACACCCTCACGTGGCCGCTACACACACGCACACACACACACACTCTTGAATAATGCTTAGTTCTTTGCTTTGGCTCAAGAGACATGAGCCAAGAAGTCTAGAGGTCCAGCATGGTTGGGACTCTCTGTCTGGGGCACCCTAGGTGCAGACTCCACTCTGTGTCTCCCAGATTCATTCCTGACACGCAGTGGGTGGGAACCACACAGACCCTCTCAACCACCTCCCATCCTCATTCATTTCCGTTCCCGAACCAGTCCCCATAAGCCTAGCTCCTCTGCCTCAGCTCCTGGCTGAGGTCCTCCTGTGGGGGATGACCTTGCGCATGGGTTGCTGTCAGCCATCCTCTCTGCCCACTAGGGTTCTGCTGCTGGATGGGAACACAGGAAATTGTGCATCCTTGGGTGGAGAGTGAGAAAAGCAGCCCTCACTATGGACTGGCCTCTAGATAGGAATGTATCAAATAAATAAATTGAACTTCTCGTGAACTGTGATGGTCGATACTATGCTCATGTGTTCCCTAAGCCTTATTATGCACAAAGAGCATCTACTTCTTCCCAGTTTTTTTCTTTTTTTCTTTAAGAGATGGGGTCTCACTATGTTGGCCCAGGCTGGATTGGAATTTCTGTGTTCAAGTGACTCTCCTGCCTCAGCCTCTTGAGTAGCTGGGACTACAGGCACGCACTGGTGTGTCCAGCTCCCAGCTTTGGGTTTTAATATCAAAGTTACCCCCTTATTAGTTTAGCACTGGGTGTATGGGCTAGGTATTAAAAGTGTGGGAAAAACCCTTCCAAACCATCTGCTAGTCAGTGGTGACTGGAGACTCATGGTCTGAAAATTCATGGTTTTGAATTTTCAAATTTTAATTTTATTACATTTATCCTATCTTCGAGTAGTGATTAGAAAACCCAGAACTCCCATTATTAAAAATAAACCTTCACAAATTGTCTGGCCCACAGATAACTCACCTTGACATTGTTTCATTTTCAGCAACTACAATGAGCTTTACCTGAAAATTACTCCAAGTTCTTCAGGCTCTCCCACTGTCTTGTGCTGTTTACTATCTTTATGACACAAGAACACATGGACCCATGGCGGGGGCAGTGTCTCACACCTGTAATTCTAGCACTTGGGAGGTCGAGGCGGGTGGATCACCTGAGGTCAGGAGTTCAAGACCAGCCTGGCCAACATAGTGAAAACCCCATCTCTACTAAAAATACAAAAATTAGCTGGGCATGGTGGCAGATGCCTGCAATCCCAGCTACTCGGGAAGGCTGAGACAGGAGAATTGCTTGAATCCGGGAGGTGGAGGTTGCAGTGAGGCGAGATCATGCCATTGCACTCCAGCCTGGGTGACAAAAGTGAAACTCTGTCTCAAAAGAAAAAAAAAAGAACACACTGACCCACAGCAGATGCACTGGGAGAGAGAGTCTCCAAAGATTCACTCCTATTAAGAGAACCAGGAAAAGGTAGCAATACTCAACCACTGTCTTCACAATAGCAGGCAAATCAGACCAGGACAATGACTCCTCAGCAATATGAGGACCTGTATTCTTCCAGCAGCTGTGAGGCCACCTTGAGGCCTGGCCCCAGCAAACTGGGAGTAGACACCTGCCCCAGCCAGCACAGAGCAGATGTGGTGGCATGTACAGGCCTGGAATAGATCTGCGGTAGGCCAATGGTACTGGGAAGGAAACCAAAATATTTCTCCCCTAAAATATTGAGGATTGGTGAGCTAAAGACAACTGAGACAGTACGGAGACTCTCTGCCTCTCCTTTGTTTGCCTAAAGGCAGGACATAAATCCCCGTCTTACTGGAGATAGCCACTTTATCAGCCTAGAGACGGCACTAGCAGACACCAGAGAAACCTGCGAGCAGACCTTACTTCATGAGTATCTTCCCCACACAGCTTTCCCCCCTTTGAGGCTGAGCTGTTCTCTCCTTTGTCTTGTCACTGCACTCTAAAATTCATTGCTTTTTGTTAAATGCTACTTAAACAAAGCTTAAAGCCTCAGGTTTCCAGCCAATGCTTTGAGAGTCACTTTGCAGAGTTACTTTCTCCCCATGATGGACACGGCATATACATTATTAAGCATACCTGTTTTCCTTGTTGATCTGTCTTTGTTTCAGAAGGGGTGACTCAGTATGAATTTTATGAGAGTGGCAAAAAGATTATATAATTTTCTCCTTCCACATTATACCAGAAATCTGAAACCAAGCGGAAGGAGTCAATGTCATAGTTCGAAGAAAAGGAGCCTCCCTTAAAAGAAAGCCTCATATACATTTCAGAAATTTCAGCCATGTGGTTGTCTTCATTTGGGTTCCCCCAGAAGCTGACCATGAGCAGGGATTTGCATCCCCTTAGTAGTTTATTTAGTAGGATTATATTCAAGAAATATAAATAAGGAAGGAAACCAGTACAGAGAGTTGTATCAAAGTTTGCCAGGCTGGGCGCAGTGGCTCACACCTACAATCTCAACAATTTGGGAAGCTGAGGCAGGAGGATCACTTGAGCTCAGGAGTTCAAGACCAGCCTGGGCAATGTAAAGACCTTGTCTCTACAAAAAATAAAAATACAAAACTAGCCAAGCGTGGTGGTGCATGCCTGTAGTCCCAGCTACTTGGGAGGCTGAGGTGGGAGGATCACTTGAGTCCAGAGGTTGGTGCAGTGAGCTGAGATCACGCCACTGCACTCCAGCCTGGGTGACAAAGTGAGACCCTAGTCTCACAAAAAAAGGTACCACTGTGAGTCACCAGAGCTCAGAATCCACTGGGGAACTCTGGTATAGAACACGCACCTCATGGTTATCCCACCCAAAAGGGACATGAGGGCAGGATGTTTACATTCCCCAACTGCTCACAGTCATTGGTTGAGCAGTGCTTTAGTGGAACATTAGTGCCATTACTTCCACCCCCATGTAGGAAGATTAGGAGCCAACAGGAAAGCCCTTAGGAAATGGATGCAGGTGTAGTTACAAGCAGCTTTACTCAACAATAGAAAGCCGAGGGGATGGAGACCCAAATTTTCTTGCCTCTGGGGCAATGATTCTGGCTGCCACTTTCCTGACCCTCCCACCCCTTTCCTTCAATAAACAATTCCCTGACACTTACAGTGTCTGGCTTGCACCTCTGCCAAGGACCCAGGAAGGAAGAGCTGCCCTCGGAAGCTTTACAATGTGCTGTGAAGAGAAGCCTCCATTATTAGGGCATCTACTCTGTGCCAGTCACTCCCTGGGCTAGCTCCTTTCCATCCACCAGGCATTCTGTGAGTAAGATTCTTCTTCTCATTTTATAGACATGCCATGCAACCATATCAATTCTCTTCAGAACAGTGTAACCCAGTGTGAGGATGTTAAAAGCAGGATCGTGTGTCTGATGCTAAGCTGATGAACAGTTTCCGCCTCTAAAAGAAGCTTCAGATGCAGGCAGAGTAAATGGGCTGATGAATGCATGCCATGTGTTGAAAAGAACTGGAATGCAGTAAGTAGGCTGCAGCCGGGACCTGCTTCAGCCTGGGACCCTGAGTGATGGGGACAGGAGTGTGGGACATGGTTAGTTCTGCCCATTTCCTCCCCTCTTCCCACCCTACCTGCCTCTGCCTCCTCCATGGTTGAGAGAAAGTGAGGGTGGTGAGAGAGGTGAGTTTAGGGAATAGGAAAAGATTTCTCACTTTATTCTTTATAAGTTATCAATAAAGGTGCCCGCTGAGCATAGAAGTTCACTGTGATCGACTCCCATGAAGCACTTTGCCTCTTTCTTGGGGATTCCATACTGAGGAACCTTATGTAACATGGGATCTGCAAGCACAACTGAAACAAATTTGGGTATAGGTAGCTCATTTAGGAAGTGTCCTTAGGGCTCAGAATTGAGGAGAGAAAGGATGAAAAGCCATAAAAAAGCATGCGGTTTAAGATTCTGCTGAAACTAATGAAGGGGTCCTATTCTACCAGGATCTGAAGGTTTGCAGGAAAGAAGCCTCCCAGAATTGTCTGCCTGACCAGTAGCCTGAAAGACAGTAGGCTGGGTGCTTCACTGCTCCCTTCCTGTCATTTAGGATTGCTCCAGGGTGCACATTAACTTTACCTCAAATGCTCTCAGCTGCTTCTGAGGGGGTGAGTATGTCTGAGGGCCAGAACCGTACCTTCCCTTAGTGTTGACACAGTTAGCAGGAGTCTGCCTTACACAGAAAGGTCCTCTGCAACTGCAGTAACAATCACTGGGCAGTCAAGCATCTGCTTCCATGAGTGAGTGTTCTGAGCCTTGAGGTCACCCACTGGTCATAGACAGACTCTCTGGATGGGACTCACCTGCAGTAGGCTGAATAATGGCCTCAAAAGGCATCCACATCTAATCCTGAAACTGTGAATGTTCATGTCAGAAAGGGACTCTGCAGAAGTGATTAAGATATCTTGAGAGGGAGATTATCCTGGATTATCCAGGCAGGCTTTAAATGCAATCACAGGTGTCCTTATAAAGAAGAGGCAGAGGGTTGTATAGACAGAGGAGGTACCTCCTGGATTATCAGGCAGGCTTTCAAATGTAATCTAAGTGTCTTAGAAAAGGGAGGCAGAGATTTGACACAGACAGAAGGAGGAGGCAATGTCACTAGGCAGAGAGAGGAGTGATGTCCACAGGGAATGCCCGCTCTTACTTAGAAGCCCAAAGAGGCAAGGGATGGAGTTCCGCCTTAGAGCCTCTGAGAGAGTGTCTCAGCTTCTGGCCTCCAGAACTATGAGGGAATAAATGCCTGTGGTTTAAGCCTAAATTTCATTAATTGTAAATTTTTTTATAGCAGCATTAGGAAATGAATACACCATGCACTGGCTCCTCTATGTTCTTTCCTGGTTCCTGAGGAACACACACTCTTGCTGCTGCTGGTGGTGGAGAACAGTTAGCTCCCAGAACTGAAAGCCCACGAGTTTCTCCTGCTGTCTTGCTTCTAGTCTCACTCTCCTCAGGCAAGTAGCCTCCCAGCCTCTCCGCATTTGGCATGTGTCACACCCCAGTCCCTCTGTCCCCACACTCTGGGACCACCAGAGGAGGCTCTCCAGTGGCTCTCTTATAGCCCCTCTCCTTTGGCCAAAAATTGGGGGCAGGCTCTCCCCATCCCCAGTGGGAAATGCAACAGCCTTGACTCAAAACCTCAGGAAAGTCTGGCCTCTGCCCTCCTACTTCCTTCAAATGCCCTGCCCCTCACCCCCATCCATTTGCAGTTCCAACTCAGAACATCAGCACCTCATTTTATAAGTGGGGCCACTTGGCTCTCTTTCGGTAACTCTCAGCCTTTGGGAACGGACAGCTTTG".getBytes();
        String mm = " C+m,139,16,5,60,507,349,11,24,0,10,5,18,2,8,9,7,2,30,1,2,3,10,2,0,7,59,4,96,14,15,8,8,55,56,88,100,49,5,16,46,4,31,53,101,8,52,24,104,5;C+h;";
        String cigar = "14S20M1I21M2D18M1D18M1D36M3D31M1D7M1D5M4I27M4D6M1D10M1I36M1D14M1I15M1D10M1D37M2I17M2D35M1I1M2I5M4I65M1D64M4I10M1D6M1D42M1D14M1D21M1I25M2I17M4D6M2D20M4D18M2D17M2D20M1D4M1D14M1I11M1D12M2I2M6D14M1D4M4D11M1I3M1D56M1D12M1I34M1D17M1D6M1D43M1D11M1D15M1D30M1D9M1I11M1D73M1D18M1D7M2I9M4I7M3I12M2D4M2I3M1D11M2I8M1D10M1D9M1D10M1D3M2D4M1D29M3D23M4I15M1D23M2I22M2D33M1D4M1D54M2D8M1D9M3D12M3D14M1I22M1D25M1I36M1D10M3D7M2I3M2I6M1I17M1I4M1I21M1I49M1D32M1D59M1I6M1I50M1I33M1I7M1I5M1D14M1D9M1I5M2D18M1D51M1D14M1D8M2I3M...25M5I4M1I5M2I30M3I1M1I56M3I98M4D13M3I20M2I32M49I96M1D5M1D14M2I30M1D71M1I11M1D23M1I37M1I8M1I10M2D12M2D16M1D10M1I33M1D29M1D4M2I9M1I18M1D39M2D91M2D10M1I14M1I5M1D12M1I35M1D1M1D40M2D28M1D3M1I5M1I10M2D17M1D24M3D1M1D62M1D6M1D33M1D3M1D12M1D8M1I13M1I2M1I41M1D19M1D85M2D35M1I19M4I4M3I3M1I6M1I2M1I10M9D24M2D1M1D23M2D18M1D18M1I34M3D13M1I44M1I11M1I31M2D58M1I14M1I4M1D30M1D24M1D28M1D41M1D50M1I8M1D13M2I3M1I73M2D43M2I16M1D23M2I55M1I21M1I16M1D61M1D19M1D20M1D13M1I43M1D28M1D48M1D17M2I71M1D8M2D3M5I11M1I8M1D8M2D49M26S";
        List<BaseModifications> mods = BaseModifications.getBaseModifications(mm, sequence, true);
        int[] positions = mods.get(0).positions;
        assertEquals(49, positions.length);
        for (int p : positions) {
            assertEquals('G', sequence[p]);   // Negative strand alignment so C -> G
        }
    }
}